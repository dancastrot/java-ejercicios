Identifica las características principales de los patrones de diseño más conocidos, indica para qué valen y un caso de uso para cada uno de ellos.

Patrones Creacionales
------------

Singleton: Se basa en generar una sola instancia de clase, y trabajar con ella durante toda la ejecución del programa. Aplica a cualquier contexto donde se necesite una instancia compartida, por ejemplo generar la lógica de un electrodoméstico y encenderlo, para luego verificar si está en funcionamiento o no.

Prototype: Permite clonar el contenido de una clase, es decir sus atributos, métodos y estado. Un ejemplo de uso es la creación de registros de trabajadores en una base de datos, donde la mayoría de los trabajadores puede compartir características como el lugar de trabajo, el cargo o nivel al que pertenecen, o tareas específicas que realicen.

Builder: Patrón de construcción basado en método build(), permite crear objetos de forma accesible en contextos de constructores con exceso de atributos. Similar a prototype, builder podría facilitar el registro de una serie de personas en BBDD al ofrecer contextos simplificados que no exijan llenar todos los datos especificados en un constructor.

Factory: Se sustenta en una clase "factory" que solicita un parámetro de entrada y acorde a la respuesta ofrece un objeto específico, que responde a las diferentes variables de una plantilla inicial jerarquizada. Un ejemplo de uso puede ser diferenciar las respuestas de una página según idiomas, o según provincia dependiendo de cada contexto.

Patrones Estructurales
-------------

Decorator: Patrón que permite añadir nuevas caracteristicas a una clase, sin tocar la clase en cuestión sino sobreponiendo nuevas clases de forma similar a como funcionan las matrioskas. Al incorporar nuevas funciones permite prescindir directamente del uso de herencia, por ejemplo para añadir características beta a un software, ya sea para probar el reconocimiento facial o implementar autentificación en dos pasos. Debido a su naturaleza de prueba, pueden incorporarse y quitarse sin afectar funcionamiento del programa.

Adapter: A partir de la creación de clases con una estructura definida desde un molde (como una interface) permite incorporar nuevas clases que no necesariamente siguen esta estructura, adaptándolas al contexto requerido según cada programa. Dado que está orientado entre otras cosas a trabajar con código antiguo, puede aplicarse para dar escalabilidad a un software dentro de un banco, para su adaptación a las capacidades actuales.

Facade: Ofrece a la vista métodos o funciones simplificadas, que esconden el funcionamiento total y complejo de una serie de métodos cual caja negra. Un ejemplo de uso podría ser facilitar a un cliente el acceso a una base de datos, ofreciendo visualmente uno o dos métodos simplificados que en realidad cumplen con funciones más detalladas y complejas para usuarios no calificados en el lenguaje.